<!--tabla usuarios-->
<div class="container py-5 text-center mx-auto">
    <h2 class="text-center text-light mx-auto my-5"></h2>

    <!--tabla-->
    <section class="d-flex justify-content-center">
        <!--boton agregar anime-->
        <div id="scrollme">
            <table class="table table-light table-striped my-5">
                <thead class="text-center">
                    <tr class="text-center mx-auto">
                        <th scope="col">Index</th>
                        <th class="col" scope="col">Rut</th>
                        <th scope="col">n° cuenta</th>
                        <th scope="col">Tipo</th>
                        <th scope="col">Detalles</th>
                        <th scope="col">Eliminar</th>
                    </tr>
                </thead>

                <tbody>
                    {{#each usuarioCuentas }}
                    <tr class="text-center ">
                        <th scope="row">{{this.index}}</th>
                        <td>{{this.rut}}</td>
                        <td>{{this.n_cuenta}}</td>
                        <td>{{this.tipo}}</td>
                        <td><a class="btn detailBtn" href="/cuentas/{{this.id}}">Detalles</a></td>
                        <td><button class="btn deleteBtn">Eliminar</button></td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>
    </section>
    <div class="text-center my-5">
        <a href="#form"> <button type="submit" id="formShow" class="btn p-2">Abrir nueva cuenta</button></a>
    </div>
</div>


<script>
    //Query selectors para almacenar los grupos de botones
    const deleteBtn = document.querySelectorAll(".deleteBtn");
    const detailBtn = document.querySelectorAll(".detailBtn");

    //Variable donde se guarda el id capturado por los botones delete, actualizar y detalles
    let id;


    let path = event.srcElement.offsetParent.nextSibling.parentElement.cells;
    let rut = path[0].innerText;

    const requestOptions = {
        method: 'GET',
        redirect: 'follow'
    };

    fetch(`http://localhost:3000/usuarios/${rut}`, requestOptions)
        .then(response => {
            if (response.status == 200) {
                return response.json();
            } else {
                throw new Error("Error al obtener los datos")
            }
        })
        .then(result => console.log(result))
        .catch(error => console.log('error', error));
        
        




    //----------------------------------------------------------
    //inicio sesion
    const btnSesion = document.getElementById('btnSesion');

    btnSesion.addEventListener('click', (event) => {

        const rut = document.getElementById('inputRut').value;
        const clave = document.getElementById('inputClave').value;

        //Guardar los valores de rut y clave en variables o en algún objeto global
        window.usuarioActual = {
            rut: rut,
            clave: clave
        };

        //redireccionar a la página con la tabla
        window.location.href = '/cliente';
    });





    
</script>








<style>
    .table {
        box-shadow: 7px 7px 5px 0px rgb(172, 171, 171);
        -webkit-box-shadow: 7px 7px 5px 0px rgb(167, 166, 166);
        -moz-box-shadow: 7px 7px 5px 0px rgb(155, 154, 154);
        width: 80vw;
    }

    .detailBtn {
        background-color: rgb(55, 81, 226);
        color: white;
    }

    .deleteBtn {
        background-color: #d30a1e;
        color: white;
    }

    #formShow {
        background-color: rgb(55, 226, 92);
        color: white;
    }

    #formShow:hover,
    .detailBtn:hover,
    .deleteBtn:hover {
        background-color: rgb(145, 170, 228);
        color: black;
    }

    @media(max-width: 768px) {
        #scrollme {
            overflow-x: scroll;
            width: 70vw;
        }
    }

    @media(max-width: 630px) {
        #scrollme {
            overflow-x: scroll;
            width: 450px;
        }
    }
</style>